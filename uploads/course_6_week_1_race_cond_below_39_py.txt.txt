#!/usr/bin/env python
# -*- coding: UTF-8 -*-
'''
Describe :
  Describes what the program does

Execute :
  python filename.py [option] [argument] ...
  ./filename.py [option] [argument] ...

Copyright :
  (C) <date> <name> ...

Reference :
  This code is in the public domain.
  Link : https://superfastpython.com/thread-race-condition-shared-variable/
'''
# Example of a race condition with a shared variable
# import the modules
from threading import Thread
 
# make additions into the global variable
def adder(amount, repeats) :
  global value

  # _ is a throwaway variable and indicates that the loop variable isn't actually used.
  # it permanently stops holding the output value of the previous expression.
  for _ in range(repeats) :
    value += amount  # critical section
 
# make subtractions from the global variable
def subtractor(amount, repeats) :
  global value

  for _ in range(repeats) :
    value -= amount
 
# define the global variable
value = 0

# configure a thread making additions
adder_thread = Thread(target=adder, args=(100, 10000))
# start the thread
adder_thread.start()

# configure a thread making subtractions
subtractor_thread = Thread(target=subtractor, args=(100, 10000))
# start the thread
subtractor_thread.start()

# wait for both threads to finish
print('Waiting for threads to finish ...')
adder_thread.join()
subtractor_thread.join()

# report the value
print(f"Value: {value}")

